<?php

/**
 * @file
 * Droodle module
 */

/**
 * Implements hook_menu().
 */
function droodle_menu() {

  $items['admin/config/services/droodle'] = array(
    'title' => 'Moodle API webservice settings (droodle)',
    'description' => 'Configure Moodle WebService.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('droodle_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'droodle.admin.inc',
  );

  return $items;
}

function droodle_test_connection() {

  $response = droodle_droodle_test_connection();

  if ($response == 1) {
    watchdog('droodle', 'Connection to moodle success!', array());
    drupal_set_message(t('Connection to moodle success!'));
  }
  else {
    watchdog('droodle', 'ERROR connecting to Moodle.', array(), WATCHDOG_ERROR);
    drupal_set_message(t('ERROR connecting to Moodle! Please check system log for details.'), 'error');
  }

}

function droodle_delete_user($account) {

  $username = $account->name;

  $response = droodle_droodle_delete_user($username);

  if ($response == 1) {
    watchdog('droodle', 'Moodle account successfully deleted for user %username.', array('%username' => $username));
  }
  else {
    watchdog('droodle', 'ERROR deleting Moodle account for user %username.', array('%username' => $username), WATCHDOG_ERROR);
  }
}

function droodle_enrol_user($account, $idnumber, $timestart = 0, $timeend = 0) {

  //debug($timestart);
  //debug($timeend);
  // looks like they are in unixtime. Check though.

  $id = droodle_droodle_course_id($idnumber);

  if (empty($id)) {
    watchdog('droodle', 'ERROR could not find Moodle course with course ID number - %idnumber.', array('%idnumber' => $idnumber), WATCHDOG_ERROR);
    return;
  }
  // Cool we have a course id.
  // enrol the user
  $username = $account->name;

  $response = droodle_droodle_enrol_user($username, $id, 5, $timestart, $timeend);

  if ($response == 1) {
    watchdog('droodle', 'Successfully enrolled user %username into Moodle course %id with a start date of %start and an end date of %end.', array('%username' => $username, '%id' => $id, '%start' => $timestart, '%end' => $timeend));
  }
  else {
    watchdog('droodle', 'ERROR enrolling user %username into Moodle course %id.', array('%username' => $username, '%id' => $id), WATCHDOG_ERROR);
  }
}

function droodle_unenrol_user($account, $idnumber) {

  $id = droodle_droodle_course_id($idnumber);

  if (empty($id)) {
    watchdog('droodle', 'ERROR could not find Moodle course with course ID number - %idnumber.', array('%idnumber' => $idnumber), WATCHDOG_ERROR);
    return;
  }
  // Cool we have a course id.
  // unenrol the user
  $username = $account->name;

  $response = droodle_droodle_unenrol_user($username, $id);

  if ($response == 1) {
    watchdog('droodle', 'Successfully unenrolled user %username from Moodle course %id.', array('%username' => $username, '%id' => $id));
  }
  else {
    watchdog('droodle', 'ERROR unenrolling user %username from Moodle course %id.', array('%username' => $username, '%id' => $id), WATCHDOG_ERROR);
  }
}

function droodle_add_group_member($account, $idnumber, $group) {

  $id = droodle_droodle_course_id($idnumber);

  if (empty($id)) {
    watchdog('droodle', 'ERROR could not find Moodle course with course ID number - %idnumber.', array('%idnumber' => $idnumber), WATCHDOG_ERROR);
    return;
  }
  // Cool we have a course id.
  // add user to group
  $username = $account->name;

  $response = droodle_droodle_add_group_member($username, $id, $group);

  if ($response == 1) {
    watchdog('droodle', 'Successfully added user %username to group %group in Moodle course %id.', array('%username' => $username, '%group' => $group, '%id' => $id));
  }
  else {
    watchdog('droodle', 'ERROR adding user %username to group %group in Moodle course %id.', array('%username' => $username, '%group' => $group, '%id' => $id), WATCHDOG_ERROR);
  }
}

function droodle_update_cohort($unchanged_cohort_name, $updated_cohort_name) {

  $cohorts = droodle_droodle_get_cohorts();
  foreach ( $cohorts as $cohort ) {
  //$key = array_search($cohort_name, $cohort);
    if ( $cohort['name'] == $unchanged_cohort_name ) {
      // We have the cohort.
      $cohort_id = $cohort['id'];
      break;
    }
  }
  if (isset($cohort_id)) {
    $response =  droodle_droodle_update_cohort($cohort_id, $updated_cohort_name);

    if ($response == 1) {
      watchdog('droodle', 'Successfully updated cohort "%unchanged_cohort_name" to "%updated_cohort_name".', array('%unchanged_cohort_name' => $unchanged_cohort_name, '%updated_cohort_name' => $updated_cohort_name));
    }
    else {
      watchdog('droodle', 'ERROR updating cohort "%unchanged_cohort_name".', array('%unchanged_cohort_name' => $unchanged_cohort_name), WATCHDOG_ERROR);
    }
  }
  else {
    watchdog('droodle', 'ERROR trying to update cohort "%unchanged_cohort_name".', array('%unchanged_cohort_name' => $unchanged_cohort_name), WATCHDOG_ERROR);
  }

}

function droodle_delete_cohort($cohort_name) {

  $cohorts = droodle_droodle_get_cohorts();

  foreach ( $cohorts as $cohort ) {
    if ( $cohort['name'] == $cohort_name ) {
      // We have the cohort.
      $cohort_id = $cohort['id'];
      break;
    }
  }
  if (isset($cohort_id)) {
    $response =  droodle_droodle_delete_cohort($cohort_id);

    if ($response == 1) {
      watchdog('droodle', 'Successfully deleted cohort "%cohort_name".', array('%cohort_name' => $cohort_name));
    }
    else {
      watchdog('droodle', 'ERROR deleting cohort "%cohort_name".', array('%cohort_name' => $cohort_name), WATCHDOG_ERROR);
    }
  }
  else {
    watchdog('droodle', 'ERROR deleting non existent cohort "%cohort_name".', array('%cohort_name' => $cohort_name), WATCHDOG_ERROR);
  }
}

function droodle_add_cohort($cohort_name) {

  $cohorts = droodle_droodle_get_cohorts();

  foreach ( $cohorts as $cohort ) {
    if ( $cohort['name'] == $cohort_name ) {
      // We already have the cohort.
      $cohort_id = $cohort['id'];
      break;
    }
  }
  if (!isset($cohort_id)) {
    $cohort_id =  droodle_droodle_add_cohort($cohort_name);

    if (is_int($cohort_id)) {
      watchdog('droodle', 'Successfully created cohort "%cohort_name".', array('%cohort_name' => $cohort_name));
    }
    else {
      watchdog('droodle', 'ERROR creating cohort "%cohort_name".', array('%cohort_name' => $cohort_name), WATCHDOG_ERROR);
    }
  }
  else {
    watchdog('droodle', 'ERROR cohort "%cohort_name" already exists.', array('%cohort_name' => $cohort_name), WATCHDOG_ERROR);
  }
}

function droodle_add_cohort_member($account, $cohort_name) {

  $username = $account->name;
  $cohorts = droodle_droodle_get_cohorts();
  foreach ( $cohorts as $cohort ) {
    //$key = array_search($cohort_name, $cohort);
    if ( $cohort['name'] == $cohort_name ) {
      // We have the cohort.
      $cohort_id = $cohort['id'];
      break;
    }
  }
  if (!isset($cohort_id)) {
    $cohort_id = droodle_droodle_add_cohort($cohort_name);
  } 
 
  if (isset($cohort_id)) {
    $response = droodle_droodle_add_cohort_member($username, $cohort_id);

    if ($response == 1) {
      watchdog('droodle', 'Successfully added user %username to cohort "%cohort_name".', array('%username' => $username, '%cohort_name' => $cohort_name));
    }
    else {
      watchdog('droodle', 'ERROR adding user %username to cohort "%cohort_name".', array('%username' => $username, '%cohort_name' => $cohort_name), WATCHDOG_ERROR);
    }
  }  
  else {
    watchdog('droodle', 'ERROR trying to create cohort "%cohort_name".', array('%cohort_name' => $cohort_name), WATCHDOG_ERROR);
  }
}


function droodle_remove_cohort_member($account, $cohort_name) {

  $username = $account->name;
  $cohorts = droodle_droodle_get_cohorts();
  foreach ( $cohorts as $cohort ) {
    //$key = array_search($cohort_name, $cohort);
    if ( $cohort['name'] == $cohort_name ) {
      // We have the cohort.
      $cohort_id = $cohort['id'];
      break;
    }
  }

  if (isset($cohort_id)) {
    $response = droodle_droodle_remove_cohort_member($username, $cohort_id);

    if ($response == 1) {
      watchdog('droodle', 'Successfully removed user %username from cohort "%cohort_name".', array('%username' => $username, '%cohort_name' => $cohort_name));
    }
    else {
      watchdog('droodle', 'ERROR removing user %username from cohort "%cohort_name".', array('%username' => $username, '%cohort_name' => $cohort_name), WATCHDOG_ERROR);
    }
  }
  else {
    watchdog('droodle', 'ERROR removing user from non existent cohort "%cohort_name".', array('%cohort_name' => $cohort_name), WATCHDOG_ERROR);
  }
}

function droodle_create_update_user($account, $firstname = '', $lastname = '') {

  $config = droodle_get_config();

  $auth = $config['authtype'];

  $username = $account->name;
  $email = $account->mail;
  //$address = field_fetch_field_values('user', $account, 'field_address', 0);
  //$firstname = field_fetch_field_values('user', $account, 'field_address', 0);
  //$lastname = field_fetch_field_values('user', $account, 'field_lastname', 0);
  //$firstname = $address['first_name'];
  //$lastname = $address['last_name'];

  //drupal_set_message('<pre.' . print_r($address, true) . '</pre>');


  $user = array(
    'username' => $username,
    'firstname' => $firstname,
    'lastname' => $lastname,
    'email' => $email,
    'auth' => $auth,
  );

  $response = droodle_droodle_create_user($user);

  if ($response == 1) {
    watchdog('droodle', 'Moodle account successfully created/updated for user %username.', array('%username' => $user['username']));
  }
  else {
    watchdog('droodle', 'ERROR creating/updating Moodle account for user %username.', array('%username' => $user['username']), WATCHDOG_ERROR);
  }
}

function droodle_droodle_delete_user($username) {

  $config = droodle_get_config();
  $functionname = 'droodle_delete_user';
  $data = array('username' => $username);

  $url = $config['fqdn'] . $config['endpoint'] . '?wstoken=' . $config['token'] . '&wsfunction=' . $functionname . '&moodlewsrestformat=' . $config['restformat'];
  $params = array();

  $response = droodle_make_request($url, HttpClientRequest::METHOD_POST, $params, $data);

  return $response;

}

function droodle_droodle_test_connection() {

  $config = droodle_get_config();
  $functionname = 'droodle_test_connection';
  $data = array();

  $url = $config['fqdn'] . $config['endpoint'] . '?wstoken=' . $config['token'] . '&wsfunction=' . $functionname . '&moodlewsrestformat=' . $config['restformat'];
  $params = array();

  $response = droodle_make_request($url, HttpClientRequest::METHOD_GET, $params, $data);

  return $response;

}

function droodle_droodle_get_cohorts() {

  $config = droodle_get_config();
  $functionname = 'droodle_get_cohorts';
  $data = array();

  $url = $config['fqdn'] . $config['endpoint'] . '?wstoken=' . $config['token'] . '&wsfunction=' . $functionname . '&moodlewsrestformat=' . $config['restformat'];
  $params = array();

  $response = droodle_make_request($url, HttpClientRequest::METHOD_GET, $params, $data);

  return $response;

}

function droodle_droodle_add_cohort($name) {

  $config = droodle_get_config();
  $functionname = 'droodle_add_cohort';
  $data = array('name' => $name);

  $url = $config['fqdn'] . $config['endpoint'] . '?wstoken=' . $config['token'] . '&wsfunction=' . $functionname . '&moodlewsrestformat=' . $config['restformat'];
  $params = array();

  $response = droodle_make_request($url, HttpClientRequest::METHOD_POST, $params, $data);

  return $response;

}

function droodle_droodle_update_cohort($id, $name) {

  $config = droodle_get_config();
  $functionname = 'droodle_update_cohort';
  $data = array('cohort_id' => $id, 'name' => $name);

  $url = $config['fqdn'] . $config['endpoint'] . '?wstoken=' . $config['token'] . '&wsfunction=' . $functionname . '&moodlewsrestformat=' . $config['restformat'];
  $params = array();

  $response = droodle_make_request($url, HttpClientRequest::METHOD_POST, $params, $data);

  return $response;

}

function droodle_droodle_delete_cohort($id) {

  $config = droodle_get_config();
  $functionname = 'droodle_delete_cohort';
  $data = array('cohort_id' => $id);

  $url = $config['fqdn'] . $config['endpoint'] . '?wstoken=' . $config['token'] . '&wsfunction=' . $functionname . '&moodlewsrestformat=' . $config['restformat'];
  $params = array();

  $response = droodle_make_request($url, HttpClientRequest::METHOD_POST, $params, $data);

  return $response;

}



function droodle_droodle_add_cohort_member($username, $cohort_id) {

  $config = droodle_get_config();
  $functionname = 'droodle_add_cohort_member';
  $data = array(
    'username' => $username,
    'cohort_id' => $cohort_id,
  );


  $url = $config['fqdn'] . $config['endpoint'] . '?wstoken=' . $config['token'] . '&wsfunction=' . $functionname . '&moodlewsrestformat=' . $config['restformat'];
  $params = array();

  $response = droodle_make_request($url, HttpClientRequest::METHOD_POST, $params, $data);

  return $response;

}

function droodle_droodle_remove_cohort_member($username, $cohort_id) {

  $config = droodle_get_config();
  $functionname = 'droodle_remove_cohort_member';
  $data = array(
    'username' => $username,
    'cohort_id' => $cohort_id,
  );


  $url = $config['fqdn'] . $config['endpoint'] . '?wstoken=' . $config['token'] . '&wsfunction=' . $functionname . '&moodlewsrestformat=' . $config['restformat'];
  $params = array();

  $response = droodle_make_request($url, HttpClientRequest::METHOD_POST, $params, $data);

  return $response;

}



function droodle_droodle_create_user($user) {
  //create the moodle user

  $config = droodle_get_config();
  $functionname = 'droodle_create_user';
  $data = $user;

  $url = $config['fqdn'] . $config['endpoint'] . '?wstoken=' . $config['token'] . '&wsfunction=' . $functionname . '&moodlewsrestformat=' . $config['restformat'];
  $params = array();

  $response = droodle_make_request($url, HttpClientRequest::METHOD_POST, $params, $data);

  return $response;

}

function droodle_droodle_course_id($idnumber) {

  $config = droodle_get_config();
  $functionname = 'droodle_course_id';

  $url = $config['fqdn'] . $config['endpoint'] . '?wstoken=' . $config['token'] . '&wsfunction=' . $functionname . '&moodlewsrestformat=' . $config['restformat'];
  $params = array();
  $data = array('idnumber' => $idnumber);

  $response = droodle_make_request($url, HttpClientRequest::METHOD_POST, $params, $data);

  return $response;

}

function droodle_droodle_enrol_user($username, $id, $roleid = 5, $timestart, $timeend) {

  $config = droodle_get_config();
  $functionname = 'droodle_enrol_user';

  $url = $config['fqdn'] . $config['endpoint'] . '?wstoken=' . $config['token'] . '&wsfunction=' . $functionname . '&moodlewsrestformat=' . $config['restformat'];
  $params = array();
  $data = array(
    'username' => $username,
    'id' => $id,
    'roleid' => $roleid,
    'timestart' => $timestart,
    'timeend' => $timeend,
  );

  $response = droodle_make_request($url, HttpClientRequest::METHOD_POST, $params, $data);

  return $response;

}

function droodle_droodle_unenrol_user($username, $id) {

  $config = droodle_get_config();
  $functionname = 'droodle_unenrol_user';

  $url = $config['fqdn'] . $config['endpoint'] . '?wstoken=' . $config['token'] . '&wsfunction=' . $functionname . '&moodlewsrestformat=' . $config['restformat'];
  $params = array();
  $data = array(
    'username' => $username,
    'id' => $id,
  );
  $response = droodle_make_request($url, HttpClientRequest::METHOD_POST, $params, $data);

  return $response;

}

function droodle_droodle_add_group_member($username, $course_id, $group) {

  $config = droodle_get_config();
  $functionname = 'droodle_add_group_member';

  $url = $config['fqdn'] . $config['endpoint'] . '?wstoken=' . $config['token'] . '&wsfunction=' . $functionname . '&moodlewsrestformat=' . $config['restformat'];
  $params = array();
  $data = array(
    'username' => $username,
    'id' => $course_id,
    'group' => $group,
  );

  $response = droodle_make_request($url, HttpClientRequest::METHOD_POST, $params, $data);

  return $response;

}

function droodle_make_request($url, $method, $params, $data) {

  $response = '';
  $formatter = new HttpClientCompositeFormatter(HttpClientBaseFormatter::FORMAT_FORM, HttpClientBaseFormatter::FORMAT_JSON);
  $client = new HttpClient(null, $formatter);

  $client->options['curlopts'] = array(
        CURLOPT_SSL_VERIFYHOST => 0,            // don't verify ssl
        CURLOPT_SSL_VERIFYPEER => false,        //
        CURLOPT_VERBOSE        => 1                //
  );

  $request = new HttpClientRequest($url, array(
  'method' => $method,
  'parameters' => $params,
  'data' => $data,
  ));
  //debug($request);
  try {
    $response = $client->execute($request);
    if (is_array($response)) {
      if (array_key_exists('exception', $response)) {
        watchdog('droodle', 'Exception detected. Exception: %e, Message: %m, Error code: %ec', array('%e' => $response['exception'], '%m' => $response['message'], '%ec' => $response['errorcode']), WATCHDOG_ERROR);
      }
    }
  }
  catch (HttpClientException $e) {
    debug($e);
    watchdog('droodle', '%e', array('%e' => $e), WATCHDOG_ERROR);
  }

  return $response;

}

function droodle_get_config() {

  $config = array(
    'token' => variable_get('droodle_token'),
    'fqdn' => variable_get('droodle_fqdn'),
    'endpoint' => variable_get('droodle_service_endpoint'),
    'restformat' => variable_get('droodle_format'),
    'cohort_user_id' => variable_get('droodle_cohort_user_id'),
    'cohort_name' => variable_get('droodle_cohort_name'),
    'cohort_description' => variable_get('droodle_cohort_description'),
    'cohort_id' => variable_get('droodle_cohort_id'),
    'authtype' => variable_get('droodle_authtype'),
  );

  return $config;

}

/**
 * Returns field values as actual entities where possible,
 * also allows selection of individual items to be returned
 */
function field_fetch_field_values($entity_type, $entity, $field_name, $get_delta = NULL, $get_key = NULL) {
  $values = array();
  if (isset($entity->$field_name) && !empty($entity->$field_name)) {
    foreach (field_get_items($entity_type, $entity, $field_name) as $delta => $item) {
      $value = $item;
      $keys = array_keys($item);
      if (count($keys)==1) {
        $key = $keys[0];
        switch ($key) {
          case 'nid':
            $value = array_shift(entity_load('node', array($item[$key])));
            break;
          case 'uid':
            $value = array_shift(entity_load('user', array($item[$key])));
            break;
          case 'tid':
            $value = array_shift(entity_load('taxonomy_term', array($item[$key])));
            break;
          case 'vid':
            $value = array_shift(entity_load('taxonomy_vocabulary', array($item[$key])));
            break;
          case 'value':
            $value = $item['value'];
            break;
        }
      }
      else {
        if ($get_key && isset($item[$get_key])) {
          $value = $item[$get_key];
        }
        elseif (array_key_exists('value', $item)) {
          $value = isset($item['safe_value']) ? $item['safe_value'] : $item['value'];
        }
      }
      $values[$delta] = $value;
    }
  }
  if (is_numeric($get_delta)) {
    return isset($values[$get_delta]) ? $values[$get_delta] : NULL;
  }
  return $values;
}
